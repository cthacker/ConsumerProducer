//Registered = new Meteor.Collection("Registered");
//Messages = new Meteor.Collection("messages");
//keepAliveMessages = new Meteor.Collection("keepAlive");
//
////repeat actions after a given time and for fixed repititions
////since using meteor, recommended to use Meteor.setInterval
//function setIntervalX(callback, delay, repetitions) {
//  var x = 0;
//  var intervalID = Meteor.setInterval(function () {
//
//     callback();
//
//     if (++x === repetitions) {
//         Meteor.clearInterval(intervalID);
//     }
//  }, delay);
//}
//

if (Meteor.isClient) {
  
  var Consumer = function (id, keepAlive) {
    this.id = id
    this.keepAlive = keepAlive
    
  }


  numConsumers = 1 ;
  consumerArray = [];
  //create consumers and add to consumerArray
  for (i=1; i <= numConsumers; i++) {
      id = i;
      //keepAlive = getRandomInt(0,12);
      keepAlive = 0
      consumerArray.push(new Consumer(id, keepAlive));
      console.log("Created Consumer " + id + " with " + keepAlive + " messages to the producer")
  }

  registerCon(consumerArray);
  // 5 seconds after Consumer registers (registerCon) we ping that we are alive and do so every 5
  // seconds
  setTimeout(pingAlive(consumerArray),5000);
  //pingAlive(consumerArray)

  // Listens to messages for each Consumer and prints to console
  Messages.find().observe({
      added: function(record){  
        consumerPrint();
      }
  });
  
  
  //Allows client to register the consumers to the producer
  function registerCon (consumerArray) {
    consumerArray.forEach(function (consumer) {
      Meteor.call("register",consumer.id, consumer.keepAlive)
    });
  }

  //sends keepAlive updates to producer every 5 seconds for each consumer
  function pingAlive (consumerArray) {
    consumerArray.forEach(function (consumer) {
      if (consumer.keepAlive > 0) {
        setIntervalX( function() {
        Meteor.call("keepAlive",consumer.id)
        }, 5000, consumer.keepAlive)
      }
    });
  }

  //prints to console the time Producer sends
  function listenProducer (consumerArray) {
    consumerArray.forEach(function (consumer) {
      printTime(consumer); 
      })
      
    };
    
  function printTime (consumer) {
    Meteor.autorun(function() {
      Meteor.subscribe("messages", consumer.id)
    })
  }


  //returns random integer between min and max inclusive
  function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }

    
 

}

if (Meteor.isServer) {

  // Consumer class -- server side representation will go into ConsumerArray during registration
  var Consumer = function (consumerID, consumerAlive) {
    this.consumerID = consumerID;
    this.consumerAlive = consumerAlive;
  }
  
  // Listens for Registered Consumer -- then sends time every second for 5 seconds
  consumerArray = []
  Registered.find().observe({
      added: function(record){  
        consumerArray.push(new Consumer(record.id, record.consumerAlive));
        sendTimeRegistered(record, 1000, 5)   
      }
  });
  
  // Listens for keepAliveMessages -- then sends time every second for 5 seconds if no more
  // keepAlive goes for final 5 seconds
  keepAliveMessages.find().observe({
      added: function(record){  
        sendTimeRegistered(record, 1000, 5)   
      }
  });
  

  //Meteor.publish(messages, function(id) {
  //    return Messages.find({consumer: id});
  //});
  
  // function to match the correct consumer id in consumerArray
  function findId(consumerArray, id) {
    for (var i = 0; i < consumerArray.length; i++) {
      if (consumerArray[i].consumerID == id) {
          return consumerArray[i];
      }
    }
  }
  
  // Sends dateTime every second for 5 seconds after being registered  consumerRegistered is
  // instance of Consumer class
  function sendTimeRegistered(record, delay, repetitions) {
    
    //consumerRegistered now points to the correct consumer so we can modify it 
    var consumerRegistered = findId(consumerArray, record.id); 
    
    if (consumerRegistered.consumerAlive > 0) {
      consumerRegistered.consumerAlive -= 1;
      setIntervalX( function() {
        var dateTime = new Date().toTimeString();
        //console.log("Consumer " + consumerRegistered.consumerID + " is Alive!")
        Messages.insert({
        msg: "Producer tells Consumer", 
        id: consumerRegistered.consumerID, 
        msg2: "the time is:",
        date: dateTime
        })  
      }, delay, repetitions)
    } else {
      // last time there won't be any more pings so send messages for 10 seconds
      setIntervalX( function() {
        var dateTime = new Date().toTimeString();
        //console.log("Consumer " + consumerRegistered.consumerID + " is Dead!")
        Messages.insert({
        msg: "Producer tells Consumer", 
        id: consumerRegistered.consumerID, 
        msg2: "the time is:",
        date: dateTime
        })
      }, delay, 2*repetitions)
    }
  }

  // Consumer calls register method and adds date, id, and keepAlive to Registered db 
  Meteor.methods({
      register: function(consumerid, keepAlive) {
          var dateTime = new Date().toTimeString();
          Registered.insert({
              date: dateTime,
              id: consumerid,
              consumerAlive: keepAlive
          });
      },
  });
  
  // server side adds consumer to the keepAliveMessages db
  Meteor.methods({
      keepAlive: function(consumerid) {
          keepAliveMessages.insert({id: consumerid});
          },
      });
  
  
  Meteor.startup(function () {
  });  
}
